using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.IO;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Input;
using AKCDesktop;

namespace AKCWPF {
    /// <summary>
    /// Interaction logic for DatabaseWindow.xaml. It consist of an ICollectionView and several controls, including filtering and exporting
    /// said view. User can also manually copy and paste columns, rows or sections of the displayed DataGrid. Note that the grid is autogenerated,
    /// but many of its members are changed programmatically on generation in order to modify styles and behaviour.
    /// </summary>

    public partial class DatabaseWindow : Window {
        public static Dictionary<int, Clipping> numberedClippings = ClippingDatabase.numberedClippings;
        private List<Clipping> finalClippingsList = ClippingDatabase.finalClippingsList;

        private ICollectionView updateableItemList { get; set; }
        public ICollectionView PublicUpdateableItemList => updateableItemList;

        private string query;
        private string category;
        private string defaultSearch;

        private bool exportingToTXT;
        private bool exportingToCSV;
        private bool exportingToHTML;

        private LoadingWindow LW;
        private MainWindow mainWindow;

        public DatabaseWindow() {
            InitializeComponent();

            query = "";
            category = "";
            defaultSearch = "Type your search term and press enter.";
        }

        public async void Window_Loaded(object sender, RoutedEventArgs e) {
            LW = new LoadingWindow();
            LW.Title = "Loading clipping database...";

            await Task.Run(() => StartLoad());
        }

        private async Task StartLoad() {
            Dispatcher.Invoke((Action) delegate () {
                filterTextBox.Text = defaultSearch;
            });

            //Call to slow code here.
            ICollectionView filterData = await Task.Run(() => InitializeFilter());

            Dispatcher.Invoke((Action)delegate () {
                OnLoadFinished(filterData);
            });

            dataGrid.ItemContainerGenerator.StatusChanged += new EventHandler(CloseLoadingWindow);
        }

        private void GetMainWindow() {
            /// <summary>
            /// Gets MainWindow, so other classes can use their variables and methods. It was used to recycle instance and methods
            /// controlling LoadingWindow (progress bar) when it was in MainWindow (not anymore), but since it can be helpful to access
            /// other particular methods I'll leave this here.
            /// </summary>

            MainWindow MW = null;

            foreach (Window window in Application.Current.Windows) {
                Type type = typeof(MainWindow);
                if (window != null && window.DependencyObjectType.Name == type.Name) {
                    MW = (MainWindow)window;
                    if (MW != null) {
                        break;
                    }
                }
            }
            mainWindow = MW;
        }

        private ICollectionView InitializeFilter() {
            updateableItemList = CollectionViewSource.GetDefaultView(finalClippingsList);
            ApplyFilter(updateableItemList);
            return updateableItemList;
        }

        private void ApplyFilter(ICollectionView myCollectionView) {
            myCollectionView.Filter = FilterByCategory;
        }

        //Apply the filter & refresh collection.
        private bool FilterByCategory(object item) {
            Clipping clipping = item as Clipping;
            string filterString = query;
            string filterField = "";
            string categoryToFilter = category;

            switch (categoryToFilter) {
                case "Book Name":
                    filterField = clipping.BookName;
                    break;

                case "Author":
                    filterField = clipping.Author;
                    break;

                case "Text":
                    filterField = clipping.Text;
                    break;

                case "Clipping type":
                    filterField = clipping.ClippingType.ToString();
                    break;

                default:
                    filterField = clipping.BookName;
                    break;
            }

            bool contains = filterField.IndexOf(filterString, StringComparison.OrdinalIgnoreCase) >= 0;

            if (contains) {
                return true;
            }
            else {
                return false;
            }
        }

        private void OnLoadFinished(ICollectionView filterData) {
            dataGrid.ItemsSource = filterData;
        }

        private void CloseLoadingWindow(object sender, EventArgs e) {
            LW.CloseLoadingWindow();
        }

        private void Window_Closing(object sender, CancelEventArgs e) {
            dataGrid.ItemsSource = null;
            dataGrid.Items.Clear();
            finalClippingsList.Clear(); //Empty list...
            numberedClippings.Clear();  //...and dict to be used again later.
        }

        private void FilterTextBox_KeyDown(object sender, KeyEventArgs e) {
            if (e.Key == Key.Enter) {
                query = filterTextBox.Text;
                ApplyFilter(updateableItemList);
            }
        }

        private void FilterTextBox_GotFocus(object sender, RoutedEventArgs e) {
            TextBox filterTextBox = (TextBox)sender;
            filterTextBox.Text = string.Empty;
            filterTextBox.GotFocus -= FilterTextBox_GotFocus;
        }

        private void CategoryDropdown_Loaded(object sender, RoutedEventArgs e) {
            List<string> comboItemList = new List<string>();
            comboItemList.Add("Book name");
            comboItemList.Add("Author");
            comboItemList.Add("Text");
            comboItemList.Add("Clipping type");   //... Add list.

            var comboBox = sender as ComboBox;  // ... Get the ComboBox reference.
            comboBox.ItemsSource = comboItemList;  // ... Assign the ItemsSource to the List.
            comboBox.SelectedIndex = 0; // ... Make the first item selected.
        }

        private void CategoryDropdown_SelectionChanged(object sender, SelectionChangedEventArgs e) {
            var selectedValue = categoryDropdown.SelectedValue;
            category = selectedValue.ToString();
        }

        /* Exports */
        private void ExportTXTBox_Checked(object sender, RoutedEventArgs e) {
            exportingToTXT = true;
        }

        private void ExportTXTBox_Unchecked(object sender, RoutedEventArgs e) {
            exportingToTXT = false;
        }

        private void ExportCSVBox_Checked(object sender, RoutedEventArgs e) {
            exportingToCSV = true;
        }

        private void ExportCSVBox_Unchecked(object sender, RoutedEventArgs e) {
            exportingToCSV = false;
        }

        private void ExportHTMLBox_Checked(object sender, RoutedEventArgs e) {
            exportingToHTML = true;
        }

        private void ExportHTMLBox_Unchecked(object sender, RoutedEventArgs e) {
            exportingToHTML = false;
        }

        private void ExportButton_Click(object sender, RoutedEventArgs e) {
            ExportClippings();
        }

        private void ExportClippings() {
            //Select path to deploy the created documents. Default: Desktop.
            string defaultPath = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
            string path;

            var exportDialog = new System.Windows.Forms.FolderBrowserDialog();
            bool folderSelected = false;

            System.Windows.Forms.DialogResult result = exportDialog.ShowDialog();
            path = exportDialog.SelectedPath;

            if ((result == System.Windows.Forms.DialogResult.OK) && (!string.IsNullOrWhiteSpace(exportDialog.SelectedPath))) {
                path = exportDialog.SelectedPath;
                folderSelected = true;
            }

            //Selecting cells, copying to clipboard and unselecting again.

            if (folderSelected) {
                dataGrid.SelectAllCells();
                dataGrid.ClipboardCopyMode = DataGridClipboardCopyMode.IncludeHeader;
                ApplicationCommands.Copy.Execute(null, dataGrid);
                dataGrid.UnselectAllCells();

                var resultCSV = "test string CSV";
                var resultString = "test string txt";
                var resultHTML = "test string HTML";

                resultCSV = (string)Clipboard.GetData(DataFormats.CommaSeparatedValue);
                resultString = (string)Clipboard.GetData(DataFormats.Text);
                resultHTML = (string)Clipboard.GetData(DataFormats.Html);

                if (exportingToTXT) {
                    using (var srTXT = new StreamWriter(path + @"\export.txt")) {
                        srTXT.Write(resultString);
                        Clipboard.Clear();
                    }
                }

                if (exportingToCSV) {
                    using (var srCSV = new StreamWriter(path + @"\export.csv")) {
                        srCSV.Write(resultCSV);
                        Clipboard.Clear();
                    }
                }

                if (exportingToHTML) {
                    using (var srHTML = new StreamWriter(path + @"\export.html")) {
                        srHTML.Write(resultHTML);
                        Clipboard.Clear();
                    }
                }

                MessageBox.Show("File(s) exported to Desktop successfully.", "Export completed");
            }
        }

        /// <summary>
        /// Manual configuration of the autogenerated grid. Column headers are changed to more user-friendly names instead of
        /// variable names. Also, column heights and widths are set up, as well as textwrapping, which is enabled. More changes
        /// can be added in the same fashion.
        /// </summary>

        private void DataGrid_AutoGeneratingColumn(object sender, DataGridAutoGeneratingColumnEventArgs e) {
            DataGrid grid = sender as DataGrid;
            if (grid == null) { return; }

            

            //Manually fixing rows header names to a more friendly format.
            if (e.PropertyName.StartsWith("BookName")) {
                e.Column.Header = "Book name";
            }

            if (e.PropertyName.StartsWith("ClippingType")) {
                e.Column.Header = "Clipping type";
            }

            if (e.PropertyName.StartsWith("DateAdded")) {
                e.Column.Header = "Date added";
            }

            if (e.PropertyName.StartsWith("BeginningPage")) {
                e.Column.Header = "Beginning page";
            }

            if (e.PropertyName.StartsWith("BeginningLocation")) {
                e.Column.Header = "Beginning location";
            }

            //Programmatically adding text wrapping to Text column.
            if (e.Column.Header.ToString() == "Text") {
                Style wrapped = new Style(typeof(TextBlock));

                var column = e.Column as DataGridTextColumn;

                column.MinWidth = 50;
                column.MaxWidth = 500;

                wrapped.Setters.Add(new Setter(TextBlock.TextWrappingProperty, TextWrapping.Wrap));
                column.ElementStyle = wrapped;
            }
        }

        private void Delete_Button_Click(object sender, RoutedEventArgs e) {
            query = string.Empty;
            filterTextBox.Text = string.Empty;
            ApplyFilter(updateableItemList);
        }
    }
}